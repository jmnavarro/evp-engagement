/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.evp.admin.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.evp.admin.model.Fund;
import com.liferay.evp.admin.model.FundModel;
import com.liferay.evp.admin.model.FundSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.User;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.service.UserLocalServiceUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Fund service. Represents a row in the &quot;evp_Fund&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.evp.admin.model.FundModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FundImpl}.
 * </p>
 *
 * @author Joan.Kim
 * @see FundImpl
 * @see com.liferay.evp.admin.model.Fund
 * @see com.liferay.evp.admin.model.FundModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FundModelImpl extends BaseModelImpl<Fund> implements FundModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fund model instance should use the {@link com.liferay.evp.admin.model.Fund} interface instead.
	 */
	public static final String TABLE_NAME = "evp_Fund";
	public static final Object[][] TABLE_COLUMNS = {
			{ "fundId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "projectId", Types.BIGINT },
			{ "amount", Types.DOUBLE },
			{ "volunteerId", Types.BIGINT },
			{ "receiveDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table evp_Fund (fundId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,projectId LONG,amount DOUBLE,volunteerId LONG,receiveDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table evp_Fund";
	public static final String ORDER_BY_JPQL = " ORDER BY fund.receiveDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY evp_Fund.receiveDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.evp.admin.model.Fund"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.evp.admin.model.Fund"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.evp.admin.model.Fund"),
			true);
	public static final long PROJECTID_COLUMN_BITMASK = 1L;
	public static final long RECEIVEDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Fund toModel(FundSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Fund model = new FundImpl();

		model.setFundId(soapModel.getFundId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setProjectId(soapModel.getProjectId());
		model.setAmount(soapModel.getAmount());
		model.setVolunteerId(soapModel.getVolunteerId());
		model.setReceiveDate(soapModel.getReceiveDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Fund> toModels(FundSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Fund> models = new ArrayList<Fund>(soapModels.length);

		for (FundSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.evp.admin.model.Fund"));

	public FundModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fundId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFundId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fundId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Fund.class;
	}

	@Override
	public String getModelClassName() {
		return Fund.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("fundId", getFundId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("projectId", getProjectId());
		attributes.put("amount", getAmount());
		attributes.put("volunteerId", getVolunteerId());
		attributes.put("receiveDate", getReceiveDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long fundId = (Long)attributes.get("fundId");

		if (fundId != null) {
			setFundId(fundId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Long volunteerId = (Long)attributes.get("volunteerId");

		if (volunteerId != null) {
			setVolunteerId(volunteerId);
		}

		Date receiveDate = (Date)attributes.get("receiveDate");

		if (receiveDate != null) {
			setReceiveDate(receiveDate);
		}
	}

	@JSON
	@Override
	public long getFundId() {
		return _fundId;
	}

	@Override
	public void setFundId(long fundId) {
		_fundId = fundId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public long getVolunteerId() {
		return _volunteerId;
	}

	@Override
	public void setVolunteerId(long volunteerId) {
		_volunteerId = volunteerId;
	}

	@JSON
	@Override
	public Date getReceiveDate() {
		return _receiveDate;
	}

	@Override
	public void setReceiveDate(Date receiveDate) {
		_columnBitmask = -1L;

		_receiveDate = receiveDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Fund.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Fund toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Fund)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FundImpl fundImpl = new FundImpl();

		fundImpl.setFundId(getFundId());
		fundImpl.setGroupId(getGroupId());
		fundImpl.setCompanyId(getCompanyId());
		fundImpl.setUserId(getUserId());
		fundImpl.setUserName(getUserName());
		fundImpl.setCreateDate(getCreateDate());
		fundImpl.setModifiedDate(getModifiedDate());
		fundImpl.setProjectId(getProjectId());
		fundImpl.setAmount(getAmount());
		fundImpl.setVolunteerId(getVolunteerId());
		fundImpl.setReceiveDate(getReceiveDate());

		fundImpl.resetOriginalValues();

		return fundImpl;
	}

	@Override
	public int compareTo(Fund fund) {
		int value = 0;

		value = DateUtil.compareTo(getReceiveDate(), fund.getReceiveDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Fund)) {
			return false;
		}

		Fund fund = (Fund)obj;

		long primaryKey = fund.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FundModelImpl fundModelImpl = this;

		fundModelImpl._originalProjectId = fundModelImpl._projectId;

		fundModelImpl._setOriginalProjectId = false;

		fundModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Fund> toCacheModel() {
		FundCacheModel fundCacheModel = new FundCacheModel();

		fundCacheModel.fundId = getFundId();

		fundCacheModel.groupId = getGroupId();

		fundCacheModel.companyId = getCompanyId();

		fundCacheModel.userId = getUserId();

		fundCacheModel.userName = getUserName();

		String userName = fundCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			fundCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			fundCacheModel.createDate = createDate.getTime();
		}
		else {
			fundCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fundCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fundCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fundCacheModel.projectId = getProjectId();

		fundCacheModel.amount = getAmount();

		fundCacheModel.volunteerId = getVolunteerId();

		Date receiveDate = getReceiveDate();

		if (receiveDate != null) {
			fundCacheModel.receiveDate = receiveDate.getTime();
		}
		else {
			fundCacheModel.receiveDate = Long.MIN_VALUE;
		}

		return fundCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{fundId=");
		sb.append(getFundId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", volunteerId=");
		sb.append(getVolunteerId());
		sb.append(", receiveDate=");
		sb.append(getReceiveDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.evp.admin.model.Fund");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>fundId</column-name><column-value><![CDATA[");
		sb.append(getFundId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>volunteerId</column-name><column-value><![CDATA[");
		sb.append(getVolunteerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receiveDate</column-name><column-value><![CDATA[");
		sb.append(getReceiveDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Fund.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Fund.class
		};
	private long _fundId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private double _amount;
	private long _volunteerId;
	private Date _receiveDate;
	private long _columnBitmask;
	private Fund _escapedModel;
}